{"version":3,"sources":["xslet.window.js"],"names":["xslet","defineUnitOfSize","nsWindow","getUnitOfSize","unitOfSize","setUnitOfSize","unit","Error","Object","defineProperty","enumerable","get","set","defineRootFontSize","htmlTag","computedHtmlStyle","getRootFontSize","parseInt","fontSize","slice","setRootFontSize","replace","num","length","style","defineWindow","window","document","getElementsByTagName","getComputedStyle","value","defineConvertedUnit"],"mappings":";;;;AAWAA,MAAA,mBAAAA,UAAAA,MAEA,WACA,YAUA,SAAAC,GAAAC,GAGA,QAAAC,KACA,MAAAC,IAAA,KAGA,QAAAC,GAAAC,GACA,GAAA,OAAAA,GAAA,OAAAA,GAAA,QAAAA,EACA,KAAA,IAAAC,OAAA,iDAAAD,EAGAF,KACAA,EAAAE,GAZA,GAAAF,EAgBAI,QAAAC,eAAAP,EAAA,cACAQ,YAAA,EACAC,IAAAR,EACAS,IAAAP,IAcA,QAAAQ,GAAAX,EAAAY,EAAAC,GAEA,QAAAC,KACA,MAAAC,UAAAF,EAAAG,SAAAC,MAAA,GAAA,IAGA,QAAAC,GAAAF,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAA,GAAA,EACA,KAAA,IAAAX,OAAA,6CACAW,EAEAA,IAAA,SAEA,CAAA,GAAA,gBAAAA,GAcA,KAAA,IAAAX,OAAA,oCAAAW,EAbA,IAAAZ,GAAAY,EAAAG,QAAA,UAAA,GACA,IAAA,OAAAf,GAAA,OAAAA,EACA,KAAA,IAAAC,OAAA,4DACAW,EAGA,IAAAI,GAAAL,SAAAC,EAAAC,MAAA,GAAAb,EAAAiB,QACA,KAAAD,EACA,KAAA,IAAAf,OAAA,6CACAW,GAOAJ,EAAAU,MAAAN,SAAAA,EAGAV,OAAAC,eAAAP,EAAA,gBACAQ,YAAA,EACAC,IAAAK,EACAJ,IAAAQ,IAYA,QAAAK,GAAAzB,EAAA0B,GACA,GAAAZ,GAAAY,EAAAC,SAAAC,qBAAA,QAAA,GACAb,EAAAW,EAAAG,iBAAAf,EAYAN,QAAAC,eAAAT,EAAA,UACAU,YAAA,EACAoB,WAGA7B,EAAAD,EAAA0B,QACAb,EAAAb,EAAA0B,OAAAZ,EAAAC,GAaAgB,oBAAA/B,EAAA0B,OAAAA,GA7HAD,EAAAzB,MAAA0B","file":"xslet.window.min.js","sourcesContent":["/*!\n * Copyright (C) 2016 xslet project.\n * This software is released under the MIT license.\n */\n\n/**\n * Is the top namespace of all xslet modules.\n *\n * @namespace xslet\n * @global\n */\n;xslet = (typeof xslet === 'undefined') ? {} : xslet;\n\n(function(){\n  'use strict';\n  defineWindow(xslet, window);\n\n\n/**\n * Defines a unit of a whole of HTML page as a property of `xslet.window`\n * namespace.\n *\n * @param nsWindow {object} - `xslet.window` namespace object.\n */\nfunction defineUnitOfSize(nsWindow) {\n  var unitOfSize;\n\n  function getUnitOfSize() {\n    return unitOfSize || 'px';\n  }\n\n  function setUnitOfSize(unit) {\n    if (unit !== 'px' && unit !== 'mm' && unit !== 'rem') {\n      throw new Error('The unit must be either \"px\", \"mm\" or \"rem\" : ' + unit);\n    }\n\n    if (!unitOfSize) {\n      unitOfSize = unit;\n    }\n  }\n\n  Object.defineProperty(nsWindow, 'unitOfSize', {\n    enumerable: true,\n    get: getUnitOfSize,\n    set: setUnitOfSize,\n  });\n}\n\n\n/**\n * Defines the root font size as a property of `xslet.window` namespace.\n *\n * @private\n * @param nsWindow {object} - `xslet.window` namespace object.\n * @param htmlTag {HTMLElement} - A HTML element of DOM.\n * @param computedHtmlStyle {CSS2Properties} - A computed style object of\n *  `htmlTag`.\n */\nfunction defineRootFontSize(nsWindow, htmlTag, computedHtmlStyle) {\n\n  function getRootFontSize() {\n    return parseInt(computedHtmlStyle.fontSize.slice(0, -2));\n  }\n\n  function setRootFontSize(fontSize) {\n    if (typeof fontSize === 'number') {\n      if (fontSize <= 0) {\n        throw new Error('The font size must be a positive number : ' +\n          fontSize);\n      }\n      fontSize = fontSize + 'px';\n\n    } else if (typeof fontSize === 'string') {\n      var unit = fontSize.replace(/^[0-9]+/, '');\n      if (unit !== 'px' && unit !== 'mm') {\n        throw new Error('The unit of root font size must be either ' +\n          '\"px\" or \"mm\" : ' + fontSize);\n      }\n\n      var num = parseInt(fontSize.slice(0, -unit.length));\n      if (!num) {\n        throw new Error('The font size must be a positive number : ' +\n          fontSize);\n      }\n\n    } else {\n      throw new Error('The font size must be a number : ' + fontSize);\n    }\n\n    htmlTag.style.fontSize = fontSize;\n  }\n\n  Object.defineProperty(nsWindow, 'rootFontSize', {\n    enumerable: true,\n    get: getRootFontSize,\n    set: setRootFontSize,\n  });\n}\n\n\n/**\n * Defines `xslet.window` namespace.\n *\n * @private\n * @param xslet {object} - `xslet` namespace object.\n * @param window {Window} - A window object of DOM.\n */\nfunction defineWindow(xslet, window) {\n  var htmlTag = window.document.getElementsByTagName('html')[0];\n  var computedHtmlStyle = window.getComputedStyle(htmlTag);\n\n  /**\n   * Is the namespace for window informations and operations.\n   *\n   * @namespace xslet.window\n   * @prop unitOfSize {string} - The unit of size used in a whole of HTML page.\n   * @prop rootFontSize {number} - The root font size.\n   *   This value is a number, and can be specified as a number or a string\n   *   of which format is `value + unit`.\n   *   The unit allowed is either `'px'`, `'mm'` or `'rem'`.\n   */\n  Object.defineProperty(xslet, 'window', {\n    enumerable: true,\n    value: {},\n  });\n\n  defineUnitOfSize(xslet.window);\n  defineRootFontSize(xslet.window, htmlTag, computedHtmlStyle);\n\n  /**\n   * Converts `value` in `fromUnit` to new value in `toUnit`.\n   * The units allowed are either `'px'`, `'mm'` and `'rem'`.\n   *\n   * @param value {number} - A value to be converted.\n   * @param fromUnit {string} - The unit of `value`.\n   * @param toUnit {string} - The unit of value after converted.\n   * @return {number} The value after converted.\n   * @memberof xslet.window\n   * @method xslet.window.convertUnit\n   */\n  defineConvertedUnit(xslet.window, window);\n}\n\n\n}());\n"]}