{"version":3,"sources":["xslet.window.js"],"names":["xslet","defineUnitOfSize","nsWindow","getUnitOfSize","unitOfSize","setUnitOfSize","unit","Error","Object","defineProperty","enumerable","get","set","defineRootFontSize","window","getRootFontSize","parseInt","computedHtmlStyle","fontSize","slice","setRootFontSize","replace","num","length","htmlTag","style","document","getElementsByTagName","getComputedStyle","getPxPerMm","divTag","createElement","position","visibility","body","appendChild","computedStyle","fontSizePx","parentNode","removeChild","Number","defineConvertUnit","convertUnit","value","fromUnit","toUnit","pxPerMm","pxPerRem","rootFontSize","calcScrollbarWidth","overflow","width","height","scrollbarWidth","offsetWidth","clientWidth","defineScrollPosition","setScrollLeft","v","isNaN","Math","max","min","getMaxScrollLeftInPixel","scroller","scrollLeft","getScrollLeft","setScrollTop","getMaxScrollTopInPixel","scrollTop","getScrollTop","getScrollWidth","scrollWidth","getScrollHeight","scrollHeight","getMaxScrollLeft","getMaxScrollTop","documentElement","clientHeight","doc","platform","ua","FIREFOX","MSIE","readonly","defineRelayout","addRelayoutListener","listener","relayoutListeners","indexOf","push","removeRelayoutListener","i","splice","relayoutImmediately","delayCounter","event","innerWidth","innerHeight","n","delayRelayouting","relayout","setTimeout","relayoutLater","delayMillis","addEventListener","defineWindow"],"mappings":"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","file":"xslet.window.min.js","sourcesContent":["/*!\n * Copyright (C) 2016 xslet project.\n * This software is released under the MIT license.\n */\n\n/**\n * Is the top namespace of all xslet modules.\n *\n * @namespace xslet\n * @global\n */\n;xslet = (typeof xslet === 'undefined') ? {} : xslet;\n\n(function(){\n  'use strict';\n  defineWindow(xslet, window);\n\n\n/**\n * Defines a unit of a whole of HTML page as a property of `xslet.window`\n * namespace.\n *\n * @param nsWindow {object} - `xslet.window` namespace object.\n */\nfunction defineUnitOfSize(nsWindow) {\n  var unitOfSize;\n\n  function getUnitOfSize() {\n    return unitOfSize || (unitOfSize = 'px');\n  }\n\n  function setUnitOfSize(unit) {\n    if (unit !== 'px' && unit !== 'mm' && unit !== 'rem') {\n      throw new Error('The unit must be either \"px\", \"mm\" or \"rem\" : ' + unit);\n    }\n\n    if (!unitOfSize) {\n      unitOfSize = unit;\n    }\n  }\n\n  Object.defineProperty(nsWindow, 'unitOfSize', {\n    enumerable: true,\n    get: getUnitOfSize,\n    set: setUnitOfSize,\n  });\n}\n\n\n/**\n * Defines the root font size as a property of `xslet.window` namespace.\n *\n * @private\n * @param nsWindow {object} - `xslet.window` namespace object.\n * @param window {Window} - A window object of DOM.\n */\nfunction defineRootFontSize(nsWindow, window) {\n  var htmlTag = window.document.getElementsByTagName('html')[0];\n  var computedHtmlStyle = window.getComputedStyle(htmlTag);\n\n  function getRootFontSize() {\n    return parseInt(computedHtmlStyle.fontSize.slice(0, -2));\n  }\n\n  function setRootFontSize(fontSize) {\n    if (typeof fontSize === 'number') {\n      if (fontSize <= 0) {\n        throw new Error('The font size must be a positive number : ' +\n          fontSize);\n      }\n      fontSize = fontSize + 'px';\n\n    } else if (typeof fontSize === 'string') {\n      var unit = fontSize.replace(/^[0-9]+/, '');\n      if (unit !== 'px' && unit !== 'mm') {\n        throw new Error('The unit of root font size must be either ' +\n          '\"px\" or \"mm\" : ' + fontSize);\n      }\n\n      var num = parseInt(fontSize.slice(0, -unit.length));\n      if (!num) {\n        throw new Error('The font size must be a positive number : ' +\n          fontSize);\n      }\n\n    } else {\n      throw new Error('The font size must be a number : ' + fontSize);\n    }\n\n    htmlTag.style.fontSize = fontSize;\n  }\n\n  Object.defineProperty(nsWindow, 'rootFontSize', {\n    enumerable: true,\n    get: getRootFontSize,\n    set: setRootFontSize,\n  });\n}\n\n\n/**\n * Gets pixel count per millimeter.\n *\n * @private\n * @param window {Window} - A window object of DOM.\n * @return {number} - Pixel count per millimeter.\n */\nfunction getPxPerMm(window) {\n  var divTag = window.document.createElement('div');\n  divTag.style.fontSize = '100mm';\n  divTag.style.position = 'absolute';\n  divTag.style.visibility = 'hidden';\n  window.document.body.appendChild(divTag);\n\n  var computedStyle = window.getComputedStyle(divTag);\n  var fontSizePx = computedStyle.fontSize;\n  divTag.parentNode.removeChild(divTag);\n  return Number(fontSizePx.slice(0, -'px'.length)) / 100;\n}\n\n/**\n * Defines a function to convert a size value in a unit to new value in\n * another unit.\n * The units supported by this function are `'px'`, `'mm'` and `'rem'`.\n *\n * @private\n * @param nsWindow {object} - The `xslet.window` namespace object.\n * @param window {Window} - The window object of DOM.\n */\nfunction defineConvertUnit(nsWindow, window) {\n  var pxPerMm;\n\n  function convertUnit(value, fromUnit, toUnit) {\n    pxPerMm = pxPerMm || getPxPerMm(window);\n    var pxPerRem = nsWindow.rootFontSize;\n\n    if (fromUnit === toUnit) {\n      return value;\n\n    } else if (fromUnit === 'px') {\n      if (toUnit === 'mm') {\n        return value / pxPerMm;\n      }\n\n      if (toUnit === 'rem') {\n        return value / pxPerRem;\n      }\n\n    } else if (fromUnit === 'mm') {\n      if (toUnit === 'px') {\n        return value * pxPerMm;\n      }\n\n      if (toUnit === 'rem') {\n        return (value * pxPerMm) / pxPerRem;\n      }\n\n    } else if (fromUnit === 'rem') {\n      if (toUnit === 'px') {\n        return value * pxPerRem;\n      }\n\n      if (toUnit === 'mm') {\n        return (value * pxPerRem) / pxPerMm;\n      }\n    }\n\n    throw new Error('Illegal units : \"' + fromUnit + '\" -> \"' + toUnit + '\"');\n  }\n\n  Object.defineProperty(nsWindow, 'convertUnit', {\n    enumerable: true,\n    value: convertUnit,\n  });\n}\n\n\n/**\n * Calculates current scroll bar width.\n *\n * Scroll bar width is different by browsers, and some browsers changes it\n * by zooming.\n * This function calculates current scroll bar width dynamically.\n * The unit of this value is `'px'`.\n *\n * @private\n * @param window {Window} - The window object of DOM.\n * @return scroll bar width [px].\n */\nfunction calcScrollbarWidth(window) {\n  var divTag = window.document.createElement('div');\n  divTag.style.position = 'absolute';\n  divTag.style.visibility = 'hiddden';\n  divTag.style.overflow = 'scroll';\n  divTag.style.width = '100px';\n  divTag.style.height = '100px';\n  window.document.body.appendChild(divTag);\n\n  var scrollbarWidth = (divTag.offsetWidth - divTag.clientWidth);\n  divTag.parentNode.removeChild(divTag);\n  return scrollbarWidth;\n}\n\n\n/**\n * Defines properties for scroll position.\n *\n * @private\n * @param nsWindow {object} - The `xslet.window` namespace object.\n * @param window {Window} - The window object of DOM.\n */\nfunction defineScrollPosition(nsWindow, window) {\n  var doc = window.document;\n  var documentElement = doc.documentElement;\n\n  var scroller = doc.body;\n  /* istanbul ignore if */\n  if (xslet.platform.ua.FIREFOX || xslet.platform.ua.MSIE) {\n    scroller = documentElement;\n  }\n\n  Object.defineProperty(nsWindow, 'scrollLeft', {\n    enumerable: true,\n    set: setScrollLeft,\n    get: getScrollLeft,\n  });\n\n  Object.defineProperty(nsWindow, 'scrollTop', {\n    enumerable: true,\n    set: setScrollTop,\n    get: getScrollTop,\n  });\n\n  Object.defineProperty(nsWindow, 'scrollWidth', {\n    enumerable: true,\n    set: readonly,\n    get: getScrollWidth,\n  });\n\n  Object.defineProperty(nsWindow, 'scrollHeight', {\n    enumerable: true,\n    set: readonly,\n    get: getScrollHeight,\n  });\n\n  Object.defineProperty(nsWindow, 'maxScrollLeft', {\n    enumerable: true,\n    set: readonly,\n    get: getMaxScrollLeft,\n  });\n\n  Object.defineProperty(nsWindow, 'maxScrollTop', {\n    enumerable: true,\n    set: readonly,\n    get: getMaxScrollTop,\n  });\n\n\n  function setScrollLeft(v) {\n    if (typeof v !== 'number' || isNaN(v)) {\n      return;\n    }\n    v = nsWindow.convertUnit(v, nsWindow.unitOfSize, 'px');\n    v = Math.max(0, Math.min(v, getMaxScrollLeftInPixel()));\n    scroller.scrollLeft = v;\n  }\n\n  function getScrollLeft() {\n    var v = scroller.scrollLeft || /* istanbul ignore next */ 0;\n    v = Math.max(0, Math.min(v, getMaxScrollLeftInPixel())); /* for Safari */\n    v = nsWindow.convertUnit(v, 'px', nsWindow.unitOfSize);\n    return v;\n  }\n\n  function setScrollTop(v) {\n    if (typeof v !== 'number' || isNaN(v)) {\n      return;\n    }\n    v = nsWindow.convertUnit(v, nsWindow.unitOfSize, 'px');\n    v = Math.max(0, Math.min(v, getMaxScrollTopInPixel()));\n    scroller.scrollTop = v;\n  }\n\n  function getScrollTop() {\n    var v = scroller.scrollTop || /* istanbul ignore next */ 0;\n    v = Math.max(0, Math.min(v, getMaxScrollTopInPixel())); /* for Safari */\n    v = nsWindow.convertUnit(v, 'px', nsWindow.unitOfSize);\n    return v;\n  }\n\n  function getScrollWidth() {\n    var v = scroller.scrollWidth || /* istanbul ignore next */ 0;\n    return nsWindow.convertUnit(v, 'px', nsWindow.unitOfSize);\n  }\n\n  function getScrollHeight() {\n    var v = scroller.scrollHeight || /* istanbul ignore next */ 0;\n    return nsWindow.convertUnit(v, 'px', nsWindow.unitOfSize);\n  }\n\n  function getMaxScrollLeft() {\n    var v = getMaxScrollLeftInPixel();\n    return nsWindow.convertUnit(v, 'px', nsWindow.unitOfSize);\n  }\n\n  function getMaxScrollTop() {\n    var v = getMaxScrollTopInPixel();\n    return nsWindow.convertUnit(v, 'px', nsWindow.unitOfSize);\n  }\n\n\n  function getMaxScrollLeftInPixel() {\n    var v = scroller.scrollWidth - documentElement.clientWidth;\n    return Math.max(0, v || /* istanbul ignore next */ 0);\n  }\n\n  function getMaxScrollTopInPixel() {\n    var v = scroller.scrollHeight - documentElement.clientHeight;\n    return Math.max(0, v || /* istanbul ignore next */ 0);\n  }\n}\n\nfunction readonly() {}\n\n\n/**\n * Defines some properties and methods for re-layouting window contents.\n *\n * @private\n * @param nsWindow {object} - The `xslet.window` namespace object.\n * @param window {Window} - The window object of DOM.\n */\nfunction defineRelayout(nsWindow, window) {\n  var scrollbarWidth = calcScrollbarWidth(window);\n\n  var relayoutListeners = [];\n  var delayMillis = 100;\n  var delayCounter = 0;\n\n  function addRelayoutListener(listener) {\n    if (typeof listener !== 'function') {\n      return;\n    }\n    if (relayoutListeners.indexOf(listener) < 0) {\n      relayoutListeners.push(listener);\n    }\n  }\n\n  function removeRelayoutListener(listener) {\n    for (var i = relayoutListeners.length - 1; i >= 0; i--) {\n      if (relayoutListeners[i] === listener) {\n        relayoutListeners.splice(i, 1);\n      }\n    }\n  }\n\n  function relayoutImmediately() {\n    delayCounter = 0;\n    scrollbarWidth = calcScrollbarWidth(window);\n\n    var event = {\n      width: convertUnit(window.innerWidth, nsWindow),\n      height: convertUnit(window.innerHeight, nsWindow),\n    };\n\n    for (var i = 0, n = relayoutListeners.length; i < n; i++) {\n      relayoutListeners[i](event);\n    }\n  }\n\n  function delayRelayouting() {\n    delayCounter--;\n    if (delayCounter === 0) {\n      relayoutImmediately();\n    } else if (delayCounter < 0) {\n      delayCounter = 0;\n    }\n  }\n\n  function relayout() {\n    delayCounter = 0;\n    window.setTimeout(relayoutImmediately, 50);\n  }\n\n  function relayoutLater() {\n    delayCounter++;\n    window.setTimeout(delayRelayouting, delayMillis);\n  }\n\n  Object.defineProperty(nsWindow, 'scrollbarWidth', {\n    enumerable: true,\n    get: function() {\n      return convertUnit(scrollbarWidth, nsWindow);\n    },\n    set: function() {},\n  });\n\n  Object.defineProperty(nsWindow, 'addRelayoutListener', {\n    enumerable: true,\n    value: addRelayoutListener,\n  });\n\n  Object.defineProperty(nsWindow, 'removeRelayoutListener', {\n    enumerable: true,\n    value: removeRelayoutListener,\n  });\n\n  Object.defineProperty(nsWindow, 'relayoutDelay', {\n    enumerable: true,\n    value: delayMillis,\n  });\n\n  Object.defineProperty(nsWindow, 'relayout', {\n    enumerable: true,\n    value: relayout,\n  });\n\n  window.addEventListener('resize', relayoutLater);\n}\n\nfunction convertUnit(value, nsWindow) {\n  return nsWindow.convertUnit(value, 'px', nsWindow.unitOfSize);\n}\n\n\n/**\n * Defines `xslet.window` namespace.\n *\n * @private\n * @param xslet {object} - `xslet` namespace object.\n * @param window {Window} - A window object of DOM.\n */\nfunction defineWindow(xslet, window) {\n  Object.defineProperty(xslet, 'window', {\n    enumerable: true,\n    value: {},\n  });\n\n  defineUnitOfSize(xslet.window);\n  defineRootFontSize(xslet.window, window);\n  defineConvertUnit(xslet.window, window);\n  defineScrollPosition(xslet.window, window);\n  defineRelayout(xslet.window, window);\n\n  /**\n   * Is the namespace for window informations and operations.\n   *\n   * @namespace xslet.window\n   * @prop unitOfSize {string} - The unit of size used in a whole of HTML page.\n   * @prop rootFontSize {number} - The root font size.\n   *   This value is a number, and can be specified as a number or a string\n   *   of which format is `value + unit`.\n   *   The unit allowed is either `'px'`, `'mm'` or `'rem'`.\n   * @prop scrollbarWidth {number} - The scroll bar width.\n   *   The unit of this value is same with `unitOfSize` property.\n   *   This value can be updated by re-layouting a page, because some browsers\n   *   change its scroll bar width by zooming.\n   *   (read only)\n   * @prop scrollLeft {number} - The horizontal scroll position of window.\n   *   The unit of this value is same with `unitOfSize` property.\n   * @prop scrollTop {number} - The vertical scroll position of window.\n   *   The unit of this value is same with `unitOfSize` property.\n   * @prop maxScrollLeft {number} - The maximum horizontal scroll position of\n   *   window.\n   *   The unit of this value is same with `unitOfSize` property.\n   *   (read only)\n   * @prop maxScrollTop {number} - The maximum vertical scroll position of\n   *   window.\n   *   The unit of this value is same with `unitOfSize` property.\n   *   (read only)\n   * @prop scrollWidth {number} - The width of scrollable area of window.\n   *   The unit of this value is same with `unitOfSize` property.\n   *   (read only)\n   * @prop scrollHeight {number} - The height of scrollable area of window.\n   *   The unit of this value is same with `unitOfSize` property.\n   *   (read only)\n   * @prop relayoutDelay {number} - The delay time to re-layout a page against\n   *   resize events. The unit of this value is millisecond.\n   */\n\n  /**\n   * Converts `value` in `fromUnit` to new value in `toUnit`.\n   * The units allowed are either `'px'`, `'mm'` and `'rem'`.\n   *\n   * @method xslet.window.convertUnit\n   * @param value {number} - A value to be converted.\n   * @param fromUnit {string} - The unit of `value`.\n   * @param toUnit {string} - The unit of value after converted.\n   * @return {number} The value after converted.\n   */\n\n  /**\n   * Re-layout a page.\n   * This method forcely executes re-layout listeners registered by\n   * `addRelayoutListener` method.\n   *\n   * @method xslet.window.relayout\n   */\n\n  /**\n   * Adds a re-layout listener which is to be called when a browser is resized\n   * or `xslet.window.relayout` method is executed.\n   *\n   * @method xslet.window.addRelayoutListener\n   * @param listener {function} - A listener function.\n   */\n\n  /**\n   * Removes a registered re-layout listener.\n   *\n   * @method xslet.window.removeRelayoutListener\n   * @param listener {function} - A listener function.\n   */\n}\n\n}());\n"]}